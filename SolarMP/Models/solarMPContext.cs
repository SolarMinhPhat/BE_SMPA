// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SolarMP.Models
{
    public partial class solarMPContext : DbContext
    {
        public solarMPContext()
        {
        }

        public solarMPContext(DbContextOptions<solarMPContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Acceptance> Acceptance { get; set; }
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<Bracket> Bracket { get; set; }
        public virtual DbSet<ConstructionContract> ConstructionContract { get; set; }
        public virtual DbSet<Image> Image { get; set; }
        public virtual DbSet<Package> Package { get; set; }
        public virtual DbSet<PackageProduct> PackageProduct { get; set; }
        public virtual DbSet<PaymentProcess> PaymentProcess { get; set; }
        public virtual DbSet<Process> Process { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductWarrantyReport> ProductWarrantyReport { get; set; }
        public virtual DbSet<Promotion> Promotion { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Survey> Survey { get; set; }
        public virtual DbSet<WarrantyReport> WarrantyReport { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=LAPTOP-8LC85HGU\\SQLEXPRESS;Initial Catalog=solarMP;Persist Security Info=True;User ID=sa;Password=12");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Acceptance>(entity =>
            {
                entity.HasOne(d => d.Constructioncontract)
                    .WithMany(p => p.Acceptance)
                    .HasForeignKey(d => d.Constructioncontractid)
                    .HasConstraintName("FK__Acceptanc__const__5165187F");
            });

            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasIndex(e => e.Username, "Username")
                    .IsUnique()
                    .HasFilter("([username] IS NOT NULL)");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Account)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Account_Role");
            });

            modelBuilder.Entity<ConstructionContract>(entity =>
            {
                entity.HasOne(d => d.Bracket)
                    .WithMany(p => p.ConstructionContract)
                    .HasForeignKey(d => d.Bracketid)
                    .HasConstraintName("FK__Construct__brack__5629CD9C");

                entity.HasOne(d => d.Package)
                    .WithMany(p => p.ConstructionContract)
                    .HasForeignKey(d => d.Packageid)
                    .HasConstraintName("FK__Construct__packa__5441852A");
            });

            modelBuilder.Entity<Image>(entity =>
            {
                entity.HasOne(d => d.Bracket)
                    .WithMany(p => p.Image)
                    .HasForeignKey(d => d.BracketId)
                    .HasConstraintName("FK_Image_Bracket");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.Image)
                    .HasForeignKey(d => d.ProcessId)
                    .HasConstraintName("FK_Image_Process");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Image)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_Image_Product");

                entity.HasOne(d => d.WarrantyReport)
                    .WithMany(p => p.Image)
                    .HasForeignKey(d => d.WarrantyReportId)
                    .HasConstraintName("FK_Image_WarrantyReport");
            });

            modelBuilder.Entity<Package>(entity =>
            {
                entity.HasOne(d => d.Promotion)
                    .WithMany(p => p.Package)
                    .HasForeignKey(d => d.Promotionid)
                    .HasConstraintName("FK__Package__promoti__5DCAEF64");
            });

            modelBuilder.Entity<PackageProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.PackageId });

                entity.HasOne(d => d.Package)
                    .WithMany(p => p.PackageProduct)
                    .HasForeignKey(d => d.PackageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PackageProduct_Package");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.PackageProduct)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PackageProduct_Product");
            });

            modelBuilder.Entity<PaymentProcess>(entity =>
            {
                entity.HasKey(e => e.Paymentid)
                    .HasName("PK__PaymentP__AF26EBEEE740B76B");

                entity.HasOne(d => d.Constructioncontract)
                    .WithMany(p => p.PaymentProcess)
                    .HasForeignKey(d => d.ConstructioncontractId)
                    .HasConstraintName("FK__PaymentPr__const__5EBF139D");
            });

            modelBuilder.Entity<Process>(entity =>
            {
                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Process)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Process_ConstructionContract");
            });

            modelBuilder.Entity<ProductWarrantyReport>(entity =>
            {
                entity.HasKey(e => new { e.Productid, e.Warrantyid });

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductWarrantyReport)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ProductWa__produ__6B24EA82");

                entity.HasOne(d => d.Warranty)
                    .WithMany(p => p.ProductWarrantyReport)
                    .HasForeignKey(d => d.Warrantyid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ProductWa__warra__628FA481");
            });

            modelBuilder.Entity<WarrantyReport>(entity =>
            {
                entity.HasKey(e => e.Warrantyid)
                    .HasName("PK__Warranty__05ACB4E9DB04664C");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.WarrantyReport)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_WarrantyReport_ConstructionContract");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}